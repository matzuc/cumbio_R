---
title: "Cumulative Biomass example"
author: "Matteo Zucchetta"
format: html
execute:
  message: false
---

## Dependancies

loading required packages for running the example. For fitting the curves and estimating the parameters, only the `drc` package is needed.

```{r warning=F, message=F}
library(drc)
library(dplyr) # data handling
library(tidyr) # data handling
library(purrr) # data handling
library(ggplot2) # plotting
library(ggthemes) # plotting
library(viridis) # plotting
library(here) # handling paths
library(rfishbase) #for retrieving TLs from fishbase
```

## Loading the dataset

We use reconstructed catches from Sea Around Us (<https://www.seaaroundus.org/>) for the EEZs of Italy downloaded in March 24^th^ 2023.

```{r}
db <- read.csv(here('data/SAU EEZ 380,901,902 v50-0.csv'), sep = ",", dec = ".")


```

## Data handling

Normally you can use multiple local and specific sources to obtains trophic levels (TLs) for the species, but in this example we use the TLs from [fishbase](www.fishbase.org), retrieved with the `rfishbase` package.

First we extract the list of species in the dataset.

```{r message=F}
splist <- db |> group_by(scientific_name, common_name) |> summarise()
```

We use the function `ecology` from `rfishbase` to extract the TL

```{r message=F}
fb <- ecology(splist$scientific_name,
        fields=c("Species", "FoodTroph", "FoodSeTroph")) |> rename(scientific_name = Species)



```

Check for duplicates in retrived TLs

```{r}
fb %>% group_by(scientific_name) %>% filter(n() > 1)
```

We can remove the onw without TL information

```{r}
fb <- fb |> filter(!((scientific_name == "Sprattus sprattus") & is.na(FoodTroph)))
```

We obtain TLs for `r length(which(is.na(fb$FoodTroph)))` species out of `r nrow(splist)` taxa in the dataset. We will remove the taxa without TL for this examples, but this operation should be carefully evaluated in a real-world analysis.

We attach the TLs to the catches dataset and remove record without TL

```{r}
db <-  left_join(db, fb)
dat <- db |> filter(!is.na(FoodTroph ))
```

### Cumulating biomass

We group the TLs in TL classes, choosing a 0.1 step, and cumulating the biomass for each TL class, groupting for EEZ and year

```{r}
# TL step
step <- 0.1

#TL range
my.lim <- seq(1-step, 5.4 +step,by=step)

#TL labels (midpoint of the class)
my.lab <- my.lim + step/2


# factor 
dat$fTL <- cut(dat$FoodTroph , my.lim, labels=my.lab[-length(my.lim)])

# numeric label for the TL class
dat$fTLr <- as.numeric(levels(dat$fTL)[dat$fTL])

```

Cumulated biomass for TL class

```{r}

cumbio <- dat |> 
	group_by(area_name, year, fTLr) |> 
	summarise(B = sum(tonnes)) |> # total biomass for TL class
	ungroup(fTLr) |> 
	arrange(area_name, year, fTLr) |> # order by TL
	mutate(ycum = cumsum(B)) |> # cumulative biomass
	mutate(ycurv = ycum / max(ycum)) #relative cumulative biomass
	

```

We can plot all the curves to compare the different zones, or to see if they cange over time.

```{r}
ggplot(cumbio, aes(fTLr, ycurv, colour = year, group = (year))) +
	geom_point(alpha = 0.5, size = 0.6) + 
	geom_line(alpha = 0.5) +
	facet_grid(.~ area_name) +
	scale_color_viridis_c(option = "magma") +
	theme_few() +
	xlab("TL") +
	ylab("Relative Cumulative Biomass") +
	ggtitle("Observed cumulative biomass curves")

```

or just focus on one curve:

```{r}
ex <- cumbio |> filter(area_name == "Sicily (Italy)", year == 2015)

ex_plot <- ggplot(ex, aes(fTLr, ycurv)) +
	geom_point(alpha = 0.5, size = 0.6) + 
	geom_line(alpha = 0.5, lty = 3) +
	facet_grid(.~ area_name) +
	theme_few() +
	xlab("TL") +
	ylab("Relative Cumulative Biomass") +
	ggtitle("Observed cumulative biomass curves")

print(ex_plot)
```

## Fit the curves and extract the parameters

we can leverage the `baro5` function from the `drc` package to fit the baroreflex 5-parameter function to the TL/ relative cumulative biomass relationship

We can define a function to fit the model (fixing the upper asymptote to 1), and extract some parameters to summarize the characteristics of the curve

```{r}

mycurve <- function(x, y, npoints = 10000){
	
	# fit the model
  r <- drm(y ~ x, fct = baro5(fixed = c(NA, NA, NA, 1, NA)))

  # use the fitted curve to predict the expected values (these are used fot plotting and estimating the parameters)
  
  # xx are the TLs
  xx <- NA;
  xx <- seq(1.6, 5,length.out = npoints)
  pr <- NA; length(pr) <- npoints# vector for prediction
  pr <- predict(r, newdata = data.frame(x = xx))
  
  # parameters
  
  dpr<-diff(pr,1)/diff(xx)
  
  # TL @ inflection point 
  TLinfl <- xx[which.max(dpr)-1]
  # maximum steepness
  Steepness <- max(dpr)
  # Biomass @ inflection
  BIOinfl<- predict(r, newdata=data.frame(x = TLinfl)) 
  # Lower asymptote
  LowA <- predict(r, newdata=data.frame(x=1))

  
  
  
  results <- list(
  	curve = data.frame(x = xx, y = pr),
  	parameters = 	data.frame(LowA = LowA, Steepness = Steepness, TLinfl = TLinfl, BIOinfl = BIOinfl) 
  )
  	
  return(results)
  
  
}

```

We use the function on the small example

```{r}
out_ex <- mycurve(ex$fTLr, ex$ycurv)
```

And see how the curve looks like

```{r}
ex_plot <- ex_plot +
	geom_line(data = out_ex$curve, aes(x = x, y = y), size = 1.1, alpha = 0.6) +
	ggtitle("Fitted curve")

print(ex_plot)
```

We can also visualize the extracted parameters

```{r}

intercept <- out_ex$parameters$BIOinfl - out_ex$parameters$Steepness * out_ex$parameters$TLinfl

ex_plot <- ex_plot  +
	geom_abline(aes(intercept = intercept, slope = out_ex$parameters$Steepness), colour = "blue", lty = 2, alpha = 0.8) +
	geom_segment(data = out_ex$parameters, aes(x = TLinfl, y = BIOinfl,
									 xend = min(out_ex$curve$x), yend = BIOinfl), size = 0.8, lty = 1, alpha = 0.8, colour = "green", arrow=arrow()) +
	geom_segment(data = out_ex$parameters, aes(x = TLinfl, y = BIOinfl,
									 xend = TLinfl, yend = 0), size = 0.8, lty = 1, alpha = 0.8, colour = "green", arrow=arrow()) +
	geom_point(data = out_ex$parameters, aes(x = TLinfl, y = BIOinfl), colour = "red", size = 1.6) 

print(ex_plot)
```

the function can be used also on the time series

```{r warning=F}

out_pars <- cumbio |> 
	group_by(area_name, year) |> 
	summarise(LowA = mycurve(fTLr, ycurv)$parameters$LowA,
						Steepness = mycurve(fTLr, ycurv)$parameters$Steepness,
						TLinfl = mycurve(fTLr, ycurv)$parameters$TLinfl,
						BIOinfl = mycurve(fTLr, ycurv)$parameters$BIOinfl)
```

We can plot the time series of the parameters

```{r}
longdata <- out_pars |> 
  tidyr::gather(variable, value, c(LowA, Steepness, TLinfl, BIOinfl)) %>% 
  group_by(area_name, year) %>% 
  #summarise(mean_value = mean(value)) %>% 
  ungroup()

ggplot(longdata, aes(year, value)) +
	geom_point(alpha = 0.7) +
	geom_line(alpha = 0.7) +
	facet_grid(variable ~ area_name, scale = "free_y") +
	theme_few() +
	ylab("Parameter value")
```

We can also extract all the fitted curves and plot them

```{r}
db_curves <- cumbio |> 
	group_by(area_name, year) |> 
  group_modify(~ mutate(.x, x = mycurve(fTLr, ycurv)$curve$x))

library(purrr)


b_curves <- cumbio  %>%
  # Group the data by area_name and year
  group_by(area_name, year) %>%
  # Split the data into a list of data frames based on the grouping
  group_split() %>%
  # Apply the mycurve function to each data frame in the list
  map(function(df) {
    # Apply the function using fTLr as x and ycurv as y
    res <- mycurve(df$fTLr, df$ycurv, npoints = 100)
    
    # Extract the curve data frame
    curve <- res$curve
    
    # Add area_name and year columns to the curve data frame
    curve$area_name <- unique(df$area_name)
    curve$year <- unique(df$year)
    
    # Return the curve data frame
    curve
  }) %>%
  # Combine the curve data frames from each list element
  bind_rows()


ggplot(b_curves, aes(x, y, colour = year, group = (year))) +
	geom_line(alpha = 0.5) +
	facet_grid(.~ area_name) +
	scale_color_viridis_c(option = "magma") +
	theme_few() +
	xlab("TL") +
	ylab("Relative Cumulative Biomass") +
	ggtitle("Fitted cumulative biomass curves") +
	geom_point(data = out_pars, aes(x = TLinfl, y =  BIOinfl), alpha = 0.4, size = 0.7)

```
